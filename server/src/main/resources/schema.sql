DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS locations CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS requests CASCADE;
DROP TABLE IF EXISTS compilations CASCADE;
DROP TABLE IF EXISTS events_in_compilation CASCADE;
DROP TYPE IF EXISTS request_status;

CREATE TYPE request_status as ENUM ('PENDING', 'CONFIRMED', 'REJECTED', 'CANCELED');

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    email VARCHAR(256) NOT NULL UNIQUE,
    name VARCHAR(256) NOT NULL
);

CREATE TABLE IF NOT EXISTS categories (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(256) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS locations (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    location_lat FLOAT NOT NULL,
    location_lon FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    annotation VARCHAR(256) NOT NULL,
    category BIGINT NOT NULL REFERENCES categories ON DELETE CASCADE,
    description VARCHAR(512),
    event_date TIMESTAMP NOT NULL,
    location BIGINT REFERENCES locations ON DELETE CASCADE,
    paid BOOLEAN,
    participant_limit INTEGER,
    request_moderation BOOLEAN,
    title VARCHAR(2048) NOT NULL,
    confirmed_requests INTEGER,
    creation_date TIMESTAMP NOT NULL,
    initiator INTEGER NOT NULL REFERENCES users ON DELETE CASCADE,
    published_date TIMESTAMP,
    state VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS requests (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    created TIMESTAMP NOT NULL,
    event INTEGER NOT NULL REFERENCES events ON DELETE CASCADE,
    requester INTEGER NOT NULL REFERENCES users ON DELETE CASCADE,
    status request_status NOT NULL,
    UNIQUE (event, requester)
);

CREATE TABLE IF NOT EXISTS compilations (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pinned BOOLEAN NOT NULL,
    title VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS events_in_compilation (
    id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    event_id INTEGER NOT NULL REFERENCES events ON DELETE CASCADE,
    compilation_id INTEGER NOT NULL REFERENCES compilations ON DELETE CASCADE
);